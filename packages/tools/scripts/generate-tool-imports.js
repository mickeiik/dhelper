// packages/tools/scripts/generate-tool-imports.js
import { readdir, writeFile } from 'node:fs/promises';
import { join } from 'node:path';
import { existsSync } from 'node:fs';

export async function generateToolImports() {
    const toolsDir = join(process.cwd(), 'packages', '@tools');

    if (!existsSync(toolsDir)) {
        console.log('ðŸ“¦ No @tools directory found, creating empty imports file');
        await createEmptyImportsFile();
        return;
    }

    try {
        const entries = await readdir(toolsDir, { withFileTypes: true });
        const toolDirs = entries
            .filter(entry => entry.isDirectory())
            .map(entry => entry.name);

        const imports = toolDirs
            .map(toolName => `import '@tools/${toolName}';`)
            .join('\n');

        const content = `// Auto-generated file - DO NOT EDIT MANUALLY
// This file is generated by scripts/generate-tool-imports.js
// It ensures all tool module augmentations are loaded for TypeScript autocomplete

${imports}

// This export is required to make this a module
export {};
`;

        const outputPath = join(process.cwd(), 'packages', 'tools', 'src', 'auto-imports.ts');
        await writeFile(outputPath, content);

        console.log(`âœ… Generated tool imports for ${toolDirs.length} tools: ${toolDirs.join(', ')}`);
    } catch (error) {
        console.error('Failed to generate tool imports:', error);
        await createEmptyImportsFile();
    }
}

async function createEmptyImportsFile() {
    const content = `// Auto-generated file - DO NOT EDIT MANUALLY
// No tools found

export {};
`;
    const outputPath = join(process.cwd(), 'packages', 'tools', 'src', 'auto-imports.ts');
    await writeFile(outputPath, content);
}

// Run the generator if this script is executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
    generateToolImports();
}